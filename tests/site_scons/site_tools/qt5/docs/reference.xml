<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (c) 2001-2010,2011,2012 The SCons Foundation

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article>
  <articleinfo>
    <title>SCons tool <quote>qt5</quote> - Reference</title>

    <author>
      <firstname>Dirk</firstname>

      <surname>Baechle</surname>
    </author>

    <pubdate>2012-12-13</pubdate>
  </articleinfo>

  <abstract>
    <para>This reference lists all the variables that are used within the
    <quote>qt5</quote> tool, and the available builders. It is intended for
    SCons tool developers and core programmers, as a normal user you should
    read the manual instead.</para>
  </abstract>

  <section>
    <title>What it does</title>

    <para>The <quote>qt5</quote> tool sets construction variables and
    registers builders for creating applications and libraries that use the
    Qt5 framework by Trolltech/Nokia.</para>

    <para>It supports the following operations:</para>

    <section>
      <title>Automatic moc file generation from header files</title>

      <para>You do not have to specify moc files explicitly, the tool does it
      for you. However, there are a few preconditions to do so: Your header
      file must have the same filebase as your implementation file. It must
      have one of the suffixes <literal>.h</literal>, <literal>.hpp</literal>,
      <literal>.H</literal>, <literal>.hxx</literal>, <literal>.hh</literal>.
      You can turn off automatic moc file generation by setting
      <literal>QT5_AUTOSCAN</literal> to 0. See also the corresponding builder
      method <literal>Moc5()</literal>.</para>
    </section>

    <section>
      <title>Automatic moc file generation from cxx files</title>

      <para>As stated in the Qt documentation, include the moc file at the end
      of the cxx file. Note that you have to include the file, which is
      generated by the transformation</para>

      <para><screen>${QT5_MOCCXXPREFIX}&lt;basename&gt;${QT5_MOCCXXSUFFIX}</screen>,
      by default <literal>&lt;basename&gt;.moc</literal>. A warning is
      generated after building the moc file, if you do not include the correct
      file. If you are using VariantDir, you may need to specify
      <literal>duplicate=1</literal>. You can turn off automatic moc file
      generation by setting <literal>QT5_AUTOSCAN</literal> to 0. See also the
      corresponding <literal>Moc5</literal> builder method.</para>
    </section>

    <section>
      <title>Handling of .ui files</title>

      <para>TODO: describe in a little more detail.</para>

      <para>See also the corresponding <literal>Uic5</literal> builder
      method.</para>
    </section>

    <section>
      <title>Handling translation files (.ts and .qm)</title>

      <para>TODO: describe in a little more detail.</para>

      <para>See also the corresponding builder methods Ts5 and Qm5.</para>
    </section>

    <section>
      <title>Compiling resource files (.qrc)</title>

      <para>TODO: describe in a little more detail.</para>

      <para>See also the corresponding Qrc5 builder method.</para>
    </section>
  </section>

  <section>
    <title>Builders</title>

    <para></para>

    <section>
      <title>Moc5</title>

      <para>Builds an output file from a moc input file. Moc input files are
      either header files or cxx files. This builder is only available after
      using the tool 'qt5'.</para>

      <para>Example:</para>

      <para><screen>env.Moc5('foo.h') # generates moc_foo.cc
env.Moc5('foo.cpp') # generates foo.moc
</screen></para>
    </section>

    <section>
      <title>XMoc5</title>

      <para>Just like the Moc5 builder, it builds an output file from a moc
      input file. Moc input files are either header files or cxx files. This
      builder is only available after using the tool 'qt5'. It is defined
      separately for the include driven Automoc strategy (#1) and can be
      controlled via the QT5_XMOC* variables.</para>

      <para>Example:</para>

      <para><screen>env.XMoc5('foo.h') # generates moc_foo.cpp
env.XMoc5('foo.cpp') # generates foo.moc
</screen></para>
    </section>

    <section>
      <title>ExplicitMoc5</title>

      <para>Just like the <literal>Moc5</literal> builder, it builds an output
      file from a moc input file. However, it does not use any default prefix
      or suffix for the filenames. You can, and have to, specify the full
      source and target names explicitly. This builder is only available after
      using the tool 'qt5'. It can be your last resort, when you have to moc
      single files from/to exotic filenames.</para>

      <para>Example:</para>

      <para><screen>env.ExplicitMoc5('moced_foo.cxx','foo.h') # generates moced_foo.cxx
</screen></para>
    </section>

    <section>
      <title>Uic5</title>

      <para>Builds a header file from an .ui file, where the former contains
      the setup code for a GUI class. This builder is only available after
      using the tool 'qt5'. Using this builder lets you override the standard
      naming conventions (be careful: prefixes are always prepended to names
      of built files; if you don't want prefixes, you may set them to
      ``).</para>

      <para>Example:</para>

      <para><screen>env.Uic5('foo.ui') # -&gt; 'ui_foo.h'
</screen></para>
    </section>

    <section>
      <title>ExplicitUic5</title>

      <para>Just like the <literal>Uic5</literal> builder, it builds a header
      file from a .ui input file. However, it does not use any default prefix
      or suffix for the filenames. You can, and have to, specify the full
      source and target names explicitly. This builder is only available after
      using the tool 'qt5'. It can be your last resort, when you have to
      convert .ui files to exotic filenames.</para>

      <para>Example:</para>

      <para><screen>env.ExplicitUic5('uiced_foo.hpp','foo.ui') # generates uiced_foo.hpp
</screen></para>
    </section>

    <section>
      <title>Qrc5</title>

      <para>Builds a cxx file, containing all resources from the given
      <literal>.qrc</literal> file. This builder is only available after using
      the tool 'qt5'.</para>

      <para>Example:</para>

      <para><screen>env.Qrc5('foo.qrc') # -&gt; ['qrc_foo.cc']
</screen></para>
    </section>

    <section>
      <title>Ts5</title>

      <para>Scans the source files in the given path for tr() marked strings,
      that should get translated. Writes a <literal>.ts</literal> file for the
      Qt Linguist. This builder is only available after using the tool
      'qt5'.</para>

      <para>Example:</para>

      <para><screen>env.Ts5('foo.ts','.') # -&gt; ['foo.ts']
</screen></para>
    </section>

    <section>
      <title>Qm5</title>

      <para>Compiles a given <literal>.ts</literal> file (Qt Linguist) into a
      binary <literal>.qm</literal> file. This builder is only available after
      using the tool 'qt5'.</para>

      <para>Example:</para>

      <para><screen>env.Qm5('foo.ts') # -&gt; ['foo.qm']
</screen></para>
    </section>
  </section>

  <section>
    <title>Variables</title>

    <para><variablelist>
        <varlistentry>
          <term>QT5DIR</term>

          <listitem>
            <para>The Qt5 tool tries to read this from the current Environment
            and <literal>os.environ</literal>. If it is not set and found, the
            value of QTDIR (in Environment/<literal>os.environ</literal>) is
            used as a fallback. It is used to initialize all QT5_*
            construction variables listed below.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_AUTOSCAN</term>

          <listitem>
            <para>The default is '1', which means that the tool is
            automatically scanning for mocable files (see also
            <literal>QT5_AUTOSCAN_STRATEGY</literal>). You can set this
            variable to '0' to switch it off, and then use the
            <literal>Moc5</literal> Builder to explicitly specify files to run
            moc on.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_BINPATH</term>

          <listitem>
            <para>The path where the Qt5 binaries are installed. The default
            value is '<literal>QT5DIR</literal>/bin'.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCCPPPATH</term>

          <listitem>
            <para>The path where the Qt5 header files are installed. The
            default value is '<literal>QT5DIR</literal>/include'. Note: If you
            set this variable to None, the tool won't change the
            <literal>CPPPATH</literal> construction variable.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_DEBUG</term>

          <listitem>
            <para>Prints lots of debugging information while scanning for moc
            files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOC</term>

          <listitem>
            <para>The path to the Qt5 moc executable. Default value is
            '<literal>QT5_BINPATH</literal>/moc'.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCCXXPREFIX</term>

          <listitem>
            <para>Default value is ''. Prefix for moc output files, when
            source is a cxx file and the Automoc strategy #0 (Q_OBJECT driven)
            is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCCXXSUFFIX</term>

          <listitem>
            <para>Default value is '.moc'. Suffix for moc output files, when
            source is a cxx file and the Automoc strategy #0 (Q_OBJECT driven)
            is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCFROMCXXFLAGS</term>

          <listitem>
            <para>Default value is '-i'. These flags are passed to moc, when
            moccing a C++ file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCFROMHFLAGS</term>

          <listitem>
            <para>Default value is ''. These flags are passed to moc, when
            moccing a header file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCHPREFIX</term>

          <listitem>
            <para>Default value is 'moc_'. Prefix for moc output files, when
            the source file is a header and the Automoc strategy #0 (Q_OBJECT
            driven) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCHSUFFIX</term>

          <listitem>
            <para>Default value is '<literal>CXXFILESUFFIX</literal>'. Suffix
            for moc output files, when the source file is a header and the
            Automoc strategy #0 (Q_OBJECT driven) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UIC</term>

          <listitem>
            <para>Default value is '<literal>QT5_BINPATH</literal>/uic'. The
            path to the Qt5 uic executable.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UICCOM</term>

          <listitem>
            <para>Command to generate the required header and source files
            from .ui form files. Is compiled from <literal>QT5_UIC</literal>
            and <literal>QT5_UICFLAGS</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UICCOMSTR</term>

          <listitem>
            <para>The string displayed when generating header and source files
            from .ui form files. If this is not set, then
            <literal>QT5_UICCOM</literal> (the command line) is
            displayed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UICFLAGS</term>

          <listitem>
            <para>Default value is ''. These flags are passed to the Qt5 uic
            executable, when creating header and source files from a .ui form
            file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UICDECLPREFIX</term>

          <listitem>
            <para>Default value is 'ui_'. Prefix for uic generated header
            files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UICDECLSUFFIX</term>

          <listitem>
            <para>Default value is '.h'. Suffix for uic generated header
            files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_UISUFFIX</term>

          <listitem>
            <para>Default value is '.ui'. Suffix of designer input files (form
            files) in Qt5.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_AUTOSCAN_STRATEGY</term>

          <listitem>
            <para>Default value is '0'. When using the Automoc feature of the
            Qt5 tool, you can select different strategies for detecting which
            files should get moced. The simple approach ('0' as the default)
            scans header and source files for the Q_OBJECT macro, so the
            trigger 'moc or not' is Q_OBJECT driven. If it is found, the
            corresponding file gets moced with the <literal>Moc5</literal>
            builder. This results in the files 'moc_foo.cc' and 'foo.moc' for
            header and source file, respectively. They get added to the list
            of sources, for compiling the current library or program. In older
            Qt manuals, a different technique for mocing is recommended. A cxx
            file includes the moced output of itself or its header at the end.
            This approach is somewhat deprecated, but the 'qtsolutions' by Qt
            are still based on it, for example. You also might have to switch
            older Qt sources to a new version 5.x.y. Then you can set this
            variable to '1', for 'include driven' mocing. This means that the
            tool searches for '#include' statements in all cxx files,
            containing a file pattern 'moc_foo.cpp' and 'foo.moc' for header
            and source file, respectively. If the file 'foo.h/foo.cpp' then
            contains a Q_OBJECT macro, it gets moced but is NOT added to the
            list of sources. This is the important difference between the two
            strategies. If no matching include patterns are found for the
            current cxx file, the Q_OBJECT driven method (#0) is tried as
            fallback.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_AUTOMOC_SCANCPPPATH</term>

          <listitem>
            <para>The default is '1', meaning that the tool scans for mocable
            files not only in the current directory, but also in all CPPPATH
            folders (see also <literal>QT5_AUTOMOC_CPPPATH</literal>). You can
            set this variable to '0' to switch it off on rare occasions, e.g.
            when too many search folders give you a bad performance in large
            projects.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_AUTOMOC_CPPPATH</term>

          <listitem>
            <para>The list of paths to scan for mocable files (see also
            <literal>QT5_AUTOMOC_SCANCPPPATH</literal>), it is empty by
            default which means that the CPPPATH variable is used. You can set
            this variable to a subset of CPPPATH in order to improve
            performance, i.e. to minimize the search space.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_GOBBLECOMMENTS</term>

          <listitem>
            <para>Default value is '0' (disabled). When you set this variable
            to '1', you enable the automatic removal of C/C++ comments, while
            searching for the Q_OBJECT keyword during the Automoc process.
            This can be helpful if you have the string Q_OBJECT in one of your
            comments, but don't want this file to get moced.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_CPPDEFINES_PASSTOMOC</term>

          <listitem>
            <para>Default value is '1' (enabled). When you set this variable
            to '1', all currently set CPPDEFINES get passed to the moc
            executable. It does not matter which strategy you selected with
            <literal>QT5_AUTOSCAN_STRATEGY</literal> or whether you call the
            <literal>Moc5</literal> builder directly.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_CLEAN_TS</term>

          <listitem>
            <para>Default value is '0' (disabled). When you set this variable
            to '1', the <literal>Ts5</literal> builder will delete your .ts
            files on a 'scons -c'. Normally, these files for the QtLinguist
            are treated as 'precious' (they are not removed prior to a
            rebuild) and do not get cleaned.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_XMOCHPREFIX</term>

          <listitem>
            <para>Default value is 'moc_'. Like
            <literal>QT5_MOCHPREFIX</literal>, this is the prefix for moc
            output files, when the source file is a header and the Automoc
            strategy #1 (include driven) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_XMOCHSUFFIX</term>

          <listitem>
            <para>Default value is '.cpp'. Like
            <literal>QT5_MOCHSUFFIX</literal>, this is the suffix for moc
            output files, when the source file is a header and the Automoc
            strategy #1 (include driven) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_XMOCCXXPREFIX</term>

          <listitem>
            <para>Default value is ''. Like
            <literal>QT5_MOCCXXPREFIX</literal>, this is the prefix for moc
            output files, when source is a cxx file and the Automoc strategy
            #1 (include driven) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_XMOCCXXSUFFIX</term>

          <listitem>
            <para>Default value is '.moc'. Like
            <literal>QT5_MOCCXXSUFFIX</literal>, this is the suffix for moc
            output files, when source is a cxx file and the Automoc strategy
            #1 (include driven) is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_RCC</term>

          <listitem>
            <para>Default value is '<literal>QT5_BINPATH</literal>/rcc'. The
            path to the Qt5 rcc executable (resource file compiler).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LUPDATE</term>

          <listitem>
            <para>Default value is '<literal>QT5_BINPATH</literal>/lupdate'.
            The path to the Qt5 lupdate executable (updates the .ts files from
            sources).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LRELEASE</term>

          <listitem>
            <para>Default value is '<literal>QT5_BINPATH</literal>/lrelease'.
            The path to the Qt5 lrelease executable (converts .ts files to
            binary .qm files).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_QRCFLAGS</term>

          <listitem>
            <para>Default value is ''. These flags are passed to the Qt5 rcc
            executable, when compiling a resource file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LUPDATEFLAGS</term>

          <listitem>
            <para>Default value is ''. These flags are passed to the Qt5
            lupdate executable, when updating .ts files from sources.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LRELEASEFLAGS</term>

          <listitem>
            <para>Default value is ''. These flags are passed to the Qt5
            lrelease executable, when compiling .ts files into binary .qm
            files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCINCPREFIX</term>

          <listitem>
            <para>Default value is '-I'. The prefix for specifying include
            directories to the Qt5 moc executable.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_QRCSUFFIX</term>

          <listitem>
            <para>Default value is '.qrc'. Suffix of Qt5 resource
            files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_QRCCXXSUFFIX</term>

          <listitem>
            <para>Default value is '$CXXFILESUFFIX'. This is the suffix for
            compiled .qrc resource files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_QRCCXXPREFIX</term>

          <listitem>
            <para>Default value is 'qrc_'. This is the prefix for compiled
            .qrc resource files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCINCFLAGS</term>

          <listitem>
            <para>List of include paths for the Qt5 moc executable, is
            compiled from <literal>QT5_MOCINCPREFIX</literal>,
            <literal>QT5_MOCCPPPATH</literal> and
            <literal>INCSUFFIX</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_MOCDEFINES</term>

          <listitem>
            <para>List of CPP defines that are passed to the Qt5 moc
            executable, is compiled from <literal>QT5_MOCDEFPREFIX</literal>,
            <literal>CPPDEFINES</literal> and
            <literal>QT5_MOCDEFSUFFIX</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LUPDATECOM</term>

          <listitem>
            <para>Command to update .ts files for translation from the
            sources.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LUPDATECOMSTR</term>

          <listitem>
            <para>The string displayed when updating .ts files from the
            sources. If this is not set, then
            <literal>QT5_LUPDATECOM</literal> (the command line) is
            displayed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LRELEASECOM</term>

          <listitem>
            <para>Command to convert .ts files to binary .qm files.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>QT5_LRELEASECOMSTR</term>

          <listitem>
            <para>The string displayed when converting .ts files to binary .qm
            files. If this is not set, then <literal>QT5_RCC</literal> (the
            command line) is displayed.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>
  </section>
</article>